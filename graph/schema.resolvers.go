package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/afrothundr/meetmeup/graph/model"
)

// CreateMeetup is the resolver for the createMeetup field.
func (r *mutationResolver) CreateMeetup(ctx context.Context, input model.NewMeetup) (*model.Meetup, error) {
	rand, _ := rand.Int(rand.Reader, big.NewInt(100))
	meetup := &model.Meetup{
		Name:        input.Name,
		ID:          fmt.Sprintf("T%d", rand),
		Description: input.Description,
		User:        &model.User{ID: input.UserID, Username: "user " + input.UserID},
	}
	r.meetups = append(r.meetups, meetup)
	return meetup, nil
}

// Meetups is the resolver for the meetups field.
func (r *queryResolver) Meetups(ctx context.Context) ([]*model.Meetup, error) {
	return r.meetups, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
